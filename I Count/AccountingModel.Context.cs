//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace I_Count
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Objects;
    using System.Data.Objects.DataClasses;
    using System.Linq;
    
    public partial class AccountingEntities : DbContext
    {
        public AccountingEntities()
            : base("name=AccountingEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public DbSet<sysdiagram> sysdiagrams { get; set; }
        public DbSet<TblBackIn> TblBackIns { get; set; }
        public DbSet<TblBackInBill> TblBackInBills { get; set; }
        public DbSet<TblBackOut> TblBackOuts { get; set; }
        public DbSet<TblBackOutBill> TblBackOutBills { get; set; }
        public DbSet<TblBill> TblBills { get; set; }
        public DbSet<TblCorrupted> TblCorrupteds { get; set; }
        public DbSet<TblCorruptedBill> TblCorruptedBills { get; set; }
        public DbSet<TblCusPro> TblCusPros { get; set; }
        public DbSet<TblCustomer> TblCustomers { get; set; }
        public DbSet<TblEmployess> TblEmployesses { get; set; }
        public DbSet<TblExpens> TblExpenses { get; set; }
        public DbSet<TblIncome> TblIncomes { get; set; }
        public DbSet<TblLog> TblLogs { get; set; }
        public DbSet<TblNoteBook> TblNoteBooks { get; set; }
        public DbSet<TblPosition> TblPositions { get; set; }
        public DbSet<TblProcedure> TblProcedures { get; set; }
        public DbSet<TblProduct> TblProducts { get; set; }
        public DbSet<TblProductsMovement> TblProductsMovements { get; set; }
        public DbSet<TblProductType> TblProductTypes { get; set; }
        public DbSet<TblProProc> TblProProcs { get; set; }
        public DbSet<TblProvider> TblProviders { get; set; }
        public DbSet<TblPurchas> TblPurchases { get; set; }
        public DbSet<TblRepayDebt> TblRepayDebts { get; set; }
        public DbSet<TblRepaySale> TblRepaySales { get; set; }
        public DbSet<TblSaleBill> TblSaleBills { get; set; }
        public DbSet<TblSale> TblSales { get; set; }
        public DbSet<TblStorageAction> TblStorageActions { get; set; }
        public DbSet<TblStorageProce> TblStorageProces { get; set; }
        public DbSet<TblStorage> TblStorages { get; set; }
        public DbSet<TblStore> TblStores { get; set; }
        public DbSet<TblTemp> TblTemps { get; set; }
        public DbSet<TblTemporary> TblTemporaries { get; set; }
        public DbSet<TblTemporaryType> TblTemporaryTypes { get; set; }
        public DbSet<TblTransfer> TblTransfers { get; set; }
        public DbSet<TblTransferBill> TblTransferBills { get; set; }
        public DbSet<TblUnit> TblUnits { get; set; }
        public DbSet<TblUser> TblUsers { get; set; }
        public DbSet<TblWeek> TblWeeks { get; set; }
    
        public virtual int Addbackoutbill(Nullable<int> backoutID, Nullable<int> productID, string outProdNum, string outPrice, string outTotal)
        {
            var backoutIDParameter = backoutID.HasValue ?
                new ObjectParameter("BackoutID", backoutID) :
                new ObjectParameter("BackoutID", typeof(int));
    
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(int));
    
            var outProdNumParameter = outProdNum != null ?
                new ObjectParameter("OutProdNum", outProdNum) :
                new ObjectParameter("OutProdNum", typeof(string));
    
            var outPriceParameter = outPrice != null ?
                new ObjectParameter("OutPrice", outPrice) :
                new ObjectParameter("OutPrice", typeof(string));
    
            var outTotalParameter = outTotal != null ?
                new ObjectParameter("OutTotal", outTotal) :
                new ObjectParameter("OutTotal", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Addbackoutbill", backoutIDParameter, productIDParameter, outProdNumParameter, outPriceParameter, outTotalParameter);
        }
    
        public virtual int AddCorrupted(ObjectParameter corruptedID, Nullable<System.DateTime> dateOfbill, string corruptedLost, Nullable<int> userID, Nullable<int> storeID)
        {
            var dateOfbillParameter = dateOfbill.HasValue ?
                new ObjectParameter("DateOfbill", dateOfbill) :
                new ObjectParameter("DateOfbill", typeof(System.DateTime));
    
            var corruptedLostParameter = corruptedLost != null ?
                new ObjectParameter("CorruptedLost", corruptedLost) :
                new ObjectParameter("CorruptedLost", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var storeIDParameter = storeID.HasValue ?
                new ObjectParameter("StoreID", storeID) :
                new ObjectParameter("StoreID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddCorrupted", corruptedID, dateOfbillParameter, corruptedLostParameter, userIDParameter, storeIDParameter);
        }
    
        public virtual int AddCorruptedbill(Nullable<int> corruptedID, string corruptedNum, Nullable<int> productID, Nullable<double> exist, string coMoney)
        {
            var corruptedIDParameter = corruptedID.HasValue ?
                new ObjectParameter("CorruptedID", corruptedID) :
                new ObjectParameter("CorruptedID", typeof(int));
    
            var corruptedNumParameter = corruptedNum != null ?
                new ObjectParameter("CorruptedNum", corruptedNum) :
                new ObjectParameter("CorruptedNum", typeof(string));
    
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(int));
    
            var existParameter = exist.HasValue ?
                new ObjectParameter("Exist", exist) :
                new ObjectParameter("Exist", typeof(double));
    
            var coMoneyParameter = coMoney != null ?
                new ObjectParameter("CoMoney", coMoney) :
                new ObjectParameter("CoMoney", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddCorruptedbill", corruptedIDParameter, corruptedNumParameter, productIDParameter, existParameter, coMoneyParameter);
        }
    
        public virtual int AddCusProc(Nullable<System.DateTime> dateOfProc, string payedValue, Nullable<int> customerID, string procName)
        {
            var dateOfProcParameter = dateOfProc.HasValue ?
                new ObjectParameter("DateOfProc", dateOfProc) :
                new ObjectParameter("DateOfProc", typeof(System.DateTime));
    
            var payedValueParameter = payedValue != null ?
                new ObjectParameter("PayedValue", payedValue) :
                new ObjectParameter("PayedValue", typeof(string));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var procNameParameter = procName != null ?
                new ObjectParameter("ProcName", procName) :
                new ObjectParameter("ProcName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddCusProc", dateOfProcParameter, payedValueParameter, customerIDParameter, procNameParameter);
        }
    
        public virtual int AddCustomer(ObjectParameter customerID, string customerName, string customerPhone, string customerCompany, string credit, string debit)
        {
            var customerNameParameter = customerName != null ?
                new ObjectParameter("CustomerName", customerName) :
                new ObjectParameter("CustomerName", typeof(string));
    
            var customerPhoneParameter = customerPhone != null ?
                new ObjectParameter("CustomerPhone", customerPhone) :
                new ObjectParameter("CustomerPhone", typeof(string));
    
            var customerCompanyParameter = customerCompany != null ?
                new ObjectParameter("CustomerCompany", customerCompany) :
                new ObjectParameter("CustomerCompany", typeof(string));
    
            var creditParameter = credit != null ?
                new ObjectParameter("Credit", credit) :
                new ObjectParameter("Credit", typeof(string));
    
            var debitParameter = debit != null ?
                new ObjectParameter("Debit", debit) :
                new ObjectParameter("Debit", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddCustomer", customerID, customerNameParameter, customerPhoneParameter, customerCompanyParameter, creditParameter, debitParameter);
        }
    
        public virtual int AddExpenses(string expensesReason, Nullable<System.DateTime> expensesDate, string money, Nullable<int> storageID, string moneytot, Nullable<int> userID)
        {
            var expensesReasonParameter = expensesReason != null ?
                new ObjectParameter("ExpensesReason", expensesReason) :
                new ObjectParameter("ExpensesReason", typeof(string));
    
            var expensesDateParameter = expensesDate.HasValue ?
                new ObjectParameter("ExpensesDate", expensesDate) :
                new ObjectParameter("ExpensesDate", typeof(System.DateTime));
    
            var moneyParameter = money != null ?
                new ObjectParameter("Money", money) :
                new ObjectParameter("Money", typeof(string));
    
            var storageIDParameter = storageID.HasValue ?
                new ObjectParameter("StorageID", storageID) :
                new ObjectParameter("StorageID", typeof(int));
    
            var moneytotParameter = moneytot != null ?
                new ObjectParameter("Moneytot", moneytot) :
                new ObjectParameter("Moneytot", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddExpenses", expensesReasonParameter, expensesDateParameter, moneyParameter, storageIDParameter, moneytotParameter, userIDParameter);
        }
    
        public virtual int Addincome(Nullable<System.DateTime> incomeDate, string incomeValue, Nullable<int> userID, string incomeResourc, string money, Nullable<int> storageID)
        {
            var incomeDateParameter = incomeDate.HasValue ?
                new ObjectParameter("IncomeDate", incomeDate) :
                new ObjectParameter("IncomeDate", typeof(System.DateTime));
    
            var incomeValueParameter = incomeValue != null ?
                new ObjectParameter("IncomeValue", incomeValue) :
                new ObjectParameter("IncomeValue", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var incomeResourcParameter = incomeResourc != null ?
                new ObjectParameter("IncomeResourc", incomeResourc) :
                new ObjectParameter("IncomeResourc", typeof(string));
    
            var moneyParameter = money != null ?
                new ObjectParameter("Money", money) :
                new ObjectParameter("Money", typeof(string));
    
            var storageIDParameter = storageID.HasValue ?
                new ObjectParameter("StorageID", storageID) :
                new ObjectParameter("StorageID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Addincome", incomeDateParameter, incomeValueParameter, userIDParameter, incomeResourcParameter, moneyParameter, storageIDParameter);
        }
    
        public virtual int AddNewProcedure(Nullable<int> storageID, Nullable<System.DateTime> procedureDate, string procedureName, Nullable<int> userID, string procedureValue)
        {
            var storageIDParameter = storageID.HasValue ?
                new ObjectParameter("StorageID", storageID) :
                new ObjectParameter("StorageID", typeof(int));
    
            var procedureDateParameter = procedureDate.HasValue ?
                new ObjectParameter("ProcedureDate", procedureDate) :
                new ObjectParameter("ProcedureDate", typeof(System.DateTime));
    
            var procedureNameParameter = procedureName != null ?
                new ObjectParameter("ProcedureName", procedureName) :
                new ObjectParameter("ProcedureName", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var procedureValueParameter = procedureValue != null ?
                new ObjectParameter("ProcedureValue", procedureValue) :
                new ObjectParameter("ProcedureValue", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddNewProcedure", storageIDParameter, procedureDateParameter, procedureNameParameter, userIDParameter, procedureValueParameter);
        }
    
        public virtual int AddNewTransferItems(string productName, Nullable<int> productTypeID, Nullable<double> exist, string price, string salePrice1, string salePrice2, Nullable<int> storeID, ObjectParameter productID)
        {
            var productNameParameter = productName != null ?
                new ObjectParameter("ProductName", productName) :
                new ObjectParameter("ProductName", typeof(string));
    
            var productTypeIDParameter = productTypeID.HasValue ?
                new ObjectParameter("ProductTypeID", productTypeID) :
                new ObjectParameter("ProductTypeID", typeof(int));
    
            var existParameter = exist.HasValue ?
                new ObjectParameter("Exist", exist) :
                new ObjectParameter("Exist", typeof(double));
    
            var priceParameter = price != null ?
                new ObjectParameter("Price", price) :
                new ObjectParameter("Price", typeof(string));
    
            var salePrice1Parameter = salePrice1 != null ?
                new ObjectParameter("SalePrice1", salePrice1) :
                new ObjectParameter("SalePrice1", typeof(string));
    
            var salePrice2Parameter = salePrice2 != null ?
                new ObjectParameter("SalePrice2", salePrice2) :
                new ObjectParameter("SalePrice2", typeof(string));
    
            var storeIDParameter = storeID.HasValue ?
                new ObjectParameter("StoreID", storeID) :
                new ObjectParameter("StoreID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddNewTransferItems", productNameParameter, productTypeIDParameter, existParameter, priceParameter, salePrice1Parameter, salePrice2Parameter, storeIDParameter, productID);
        }
    
        public virtual int AddNewUser(string name, string userName, string password, string telephoneNumber, Nullable<int> positionID)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var telephoneNumberParameter = telephoneNumber != null ?
                new ObjectParameter("TelephoneNumber", telephoneNumber) :
                new ObjectParameter("TelephoneNumber", typeof(string));
    
            var positionIDParameter = positionID.HasValue ?
                new ObjectParameter("PositionID", positionID) :
                new ObjectParameter("PositionID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddNewUser", nameParameter, userNameParameter, passwordParameter, telephoneNumberParameter, positionIDParameter);
        }
    
        public virtual int AddNoteToproviderPay(Nullable<int> providerID, Nullable<int> weekDayID, string noteMoney)
        {
            var providerIDParameter = providerID.HasValue ?
                new ObjectParameter("ProviderID", providerID) :
                new ObjectParameter("ProviderID", typeof(int));
    
            var weekDayIDParameter = weekDayID.HasValue ?
                new ObjectParameter("WeekDayID", weekDayID) :
                new ObjectParameter("WeekDayID", typeof(int));
    
            var noteMoneyParameter = noteMoney != null ?
                new ObjectParameter("NoteMoney", noteMoney) :
                new ObjectParameter("NoteMoney", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddNoteToproviderPay", providerIDParameter, weekDayIDParameter, noteMoneyParameter);
        }
    
        public virtual int AddProMovement(string moveQuantity, Nullable<int> productID, Nullable<int> temporaryID, Nullable<System.DateTime> moveDate, string moveValue)
        {
            var moveQuantityParameter = moveQuantity != null ?
                new ObjectParameter("MoveQuantity", moveQuantity) :
                new ObjectParameter("MoveQuantity", typeof(string));
    
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(int));
    
            var temporaryIDParameter = temporaryID.HasValue ?
                new ObjectParameter("TemporaryID", temporaryID) :
                new ObjectParameter("TemporaryID", typeof(int));
    
            var moveDateParameter = moveDate.HasValue ?
                new ObjectParameter("MoveDate", moveDate) :
                new ObjectParameter("MoveDate", typeof(System.DateTime));
    
            var moveValueParameter = moveValue != null ?
                new ObjectParameter("MoveValue", moveValue) :
                new ObjectParameter("MoveValue", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddProMovement", moveQuantityParameter, productIDParameter, temporaryIDParameter, moveDateParameter, moveValueParameter);
        }
    
        public virtual int AddProProc(Nullable<System.DateTime> proDate, string pRocName, string proPaied, Nullable<int> providerID)
        {
            var proDateParameter = proDate.HasValue ?
                new ObjectParameter("ProDate", proDate) :
                new ObjectParameter("ProDate", typeof(System.DateTime));
    
            var pRocNameParameter = pRocName != null ?
                new ObjectParameter("PRocName", pRocName) :
                new ObjectParameter("PRocName", typeof(string));
    
            var proPaiedParameter = proPaied != null ?
                new ObjectParameter("ProPaied", proPaied) :
                new ObjectParameter("ProPaied", typeof(string));
    
            var providerIDParameter = providerID.HasValue ?
                new ObjectParameter("ProviderID", providerID) :
                new ObjectParameter("ProviderID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddProProc", proDateParameter, pRocNameParameter, proPaiedParameter, providerIDParameter);
        }
    
        public virtual int AddStorage(string storageName, string totalMoney, Nullable<int> storeID)
        {
            var storageNameParameter = storageName != null ?
                new ObjectParameter("StorageName", storageName) :
                new ObjectParameter("StorageName", typeof(string));
    
            var totalMoneyParameter = totalMoney != null ?
                new ObjectParameter("TotalMoney", totalMoney) :
                new ObjectParameter("TotalMoney", typeof(string));
    
            var storeIDParameter = storeID.HasValue ?
                new ObjectParameter("StoreID", storeID) :
                new ObjectParameter("StoreID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddStorage", storageNameParameter, totalMoneyParameter, storeIDParameter);
        }
    
        public virtual int AddStorageAction(Nullable<int> sActionID, Nullable<System.DateTime> sPDate, string sPMoney, Nullable<int> storageID)
        {
            var sActionIDParameter = sActionID.HasValue ?
                new ObjectParameter("SActionID", sActionID) :
                new ObjectParameter("SActionID", typeof(int));
    
            var sPDateParameter = sPDate.HasValue ?
                new ObjectParameter("SPDate", sPDate) :
                new ObjectParameter("SPDate", typeof(System.DateTime));
    
            var sPMoneyParameter = sPMoney != null ?
                new ObjectParameter("SPMoney", sPMoney) :
                new ObjectParameter("SPMoney", typeof(string));
    
            var storageIDParameter = storageID.HasValue ?
                new ObjectParameter("StorageID", storageID) :
                new ObjectParameter("StorageID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddStorageAction", sActionIDParameter, sPDateParameter, sPMoneyParameter, storageIDParameter);
        }
    
        public virtual int addTemporary(Nullable<int> temporaryID, string tID, string tPrice, string tproName, string tProType, string tQuantity, string tSPrice, string tSPrise1, string tTotal, string tExsist)
        {
            var temporaryIDParameter = temporaryID.HasValue ?
                new ObjectParameter("TemporaryID", temporaryID) :
                new ObjectParameter("TemporaryID", typeof(int));
    
            var tIDParameter = tID != null ?
                new ObjectParameter("TID", tID) :
                new ObjectParameter("TID", typeof(string));
    
            var tPriceParameter = tPrice != null ?
                new ObjectParameter("TPrice", tPrice) :
                new ObjectParameter("TPrice", typeof(string));
    
            var tproNameParameter = tproName != null ?
                new ObjectParameter("TproName", tproName) :
                new ObjectParameter("TproName", typeof(string));
    
            var tProTypeParameter = tProType != null ?
                new ObjectParameter("TProType", tProType) :
                new ObjectParameter("TProType", typeof(string));
    
            var tQuantityParameter = tQuantity != null ?
                new ObjectParameter("TQuantity", tQuantity) :
                new ObjectParameter("TQuantity", typeof(string));
    
            var tSPriceParameter = tSPrice != null ?
                new ObjectParameter("TSPrice", tSPrice) :
                new ObjectParameter("TSPrice", typeof(string));
    
            var tSPrise1Parameter = tSPrise1 != null ?
                new ObjectParameter("TSPrise1", tSPrise1) :
                new ObjectParameter("TSPrise1", typeof(string));
    
            var tTotalParameter = tTotal != null ?
                new ObjectParameter("TTotal", tTotal) :
                new ObjectParameter("TTotal", typeof(string));
    
            var tExsistParameter = tExsist != null ?
                new ObjectParameter("TExsist", tExsist) :
                new ObjectParameter("TExsist", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("addTemporary", temporaryIDParameter, tIDParameter, tPriceParameter, tproNameParameter, tProTypeParameter, tQuantityParameter, tSPriceParameter, tSPrise1Parameter, tTotalParameter, tExsistParameter);
        }
    
        public virtual int AddTransfer(Nullable<int> productID, Nullable<int> transferBillID, string transQuantity)
        {
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(int));
    
            var transferBillIDParameter = transferBillID.HasValue ?
                new ObjectParameter("TransferBillID", transferBillID) :
                new ObjectParameter("TransferBillID", typeof(int));
    
            var transQuantityParameter = transQuantity != null ?
                new ObjectParameter("TransQuantity", transQuantity) :
                new ObjectParameter("TransQuantity", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddTransfer", productIDParameter, transferBillIDParameter, transQuantityParameter);
        }
    
        public virtual int addtransferbill(Nullable<int> storeID, string storeTo, Nullable<System.DateTime> transferDate, Nullable<int> userID, ObjectParameter transferBillID)
        {
            var storeIDParameter = storeID.HasValue ?
                new ObjectParameter("StoreID", storeID) :
                new ObjectParameter("StoreID", typeof(int));
    
            var storeToParameter = storeTo != null ?
                new ObjectParameter("StoreTo", storeTo) :
                new ObjectParameter("StoreTo", typeof(string));
    
            var transferDateParameter = transferDate.HasValue ?
                new ObjectParameter("TransferDate", transferDate) :
                new ObjectParameter("TransferDate", typeof(System.DateTime));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("addtransferbill", storeIDParameter, storeToParameter, transferDateParameter, userIDParameter, transferBillID);
        }
    
        public virtual int EditCustomers(string customerName, string customerCompany, string customerPhone, string debit, string credit, Nullable<int> customerID)
        {
            var customerNameParameter = customerName != null ?
                new ObjectParameter("CustomerName", customerName) :
                new ObjectParameter("CustomerName", typeof(string));
    
            var customerCompanyParameter = customerCompany != null ?
                new ObjectParameter("CustomerCompany", customerCompany) :
                new ObjectParameter("CustomerCompany", typeof(string));
    
            var customerPhoneParameter = customerPhone != null ?
                new ObjectParameter("CustomerPhone", customerPhone) :
                new ObjectParameter("CustomerPhone", typeof(string));
    
            var debitParameter = debit != null ?
                new ObjectParameter("Debit", debit) :
                new ObjectParameter("Debit", typeof(string));
    
            var creditParameter = credit != null ?
                new ObjectParameter("Credit", credit) :
                new ObjectParameter("Credit", typeof(string));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EditCustomers", customerNameParameter, customerCompanyParameter, customerPhoneParameter, debitParameter, creditParameter, customerIDParameter);
        }
    
        public virtual int EditNoteBook(Nullable<int> weekDayID, string noteMoney, Nullable<int> providerID)
        {
            var weekDayIDParameter = weekDayID.HasValue ?
                new ObjectParameter("WeekDayID", weekDayID) :
                new ObjectParameter("WeekDayID", typeof(int));
    
            var noteMoneyParameter = noteMoney != null ?
                new ObjectParameter("NoteMoney", noteMoney) :
                new ObjectParameter("NoteMoney", typeof(string));
    
            var providerIDParameter = providerID.HasValue ?
                new ObjectParameter("ProviderID", providerID) :
                new ObjectParameter("ProviderID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EditNoteBook", weekDayIDParameter, noteMoneyParameter, providerIDParameter);
        }
    
        public virtual int EditProviders(string customerName, string customerCompany, string customerPhone, string debit, string credit, Nullable<int> providerID)
        {
            var customerNameParameter = customerName != null ?
                new ObjectParameter("CustomerName", customerName) :
                new ObjectParameter("CustomerName", typeof(string));
    
            var customerCompanyParameter = customerCompany != null ?
                new ObjectParameter("CustomerCompany", customerCompany) :
                new ObjectParameter("CustomerCompany", typeof(string));
    
            var customerPhoneParameter = customerPhone != null ?
                new ObjectParameter("CustomerPhone", customerPhone) :
                new ObjectParameter("CustomerPhone", typeof(string));
    
            var debitParameter = debit != null ?
                new ObjectParameter("Debit", debit) :
                new ObjectParameter("Debit", typeof(string));
    
            var creditParameter = credit != null ?
                new ObjectParameter("Credit", credit) :
                new ObjectParameter("Credit", typeof(string));
    
            var providerIDParameter = providerID.HasValue ?
                new ObjectParameter("ProviderID", providerID) :
                new ObjectParameter("ProviderID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EditProviders", customerNameParameter, customerCompanyParameter, customerPhoneParameter, debitParameter, creditParameter, providerIDParameter);
        }
    
        public virtual int InsertBackinbill(ObjectParameter backInID, Nullable<int> customerID, Nullable<System.DateTime> dateOfBackeIn, string totalPaybake, Nullable<int> userID, Nullable<int> storeID)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var dateOfBackeInParameter = dateOfBackeIn.HasValue ?
                new ObjectParameter("DateOfBackeIn", dateOfBackeIn) :
                new ObjectParameter("DateOfBackeIn", typeof(System.DateTime));
    
            var totalPaybakeParameter = totalPaybake != null ?
                new ObjectParameter("TotalPaybake", totalPaybake) :
                new ObjectParameter("TotalPaybake", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var storeIDParameter = storeID.HasValue ?
                new ObjectParameter("StoreID", storeID) :
                new ObjectParameter("StoreID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertBackinbill", backInID, customerIDParameter, dateOfBackeInParameter, totalPaybakeParameter, userIDParameter, storeIDParameter);
        }
    
        public virtual int insertbackout(ObjectParameter backoutID, Nullable<System.DateTime> dateOfBackout, Nullable<int> providerID, string totalMony, Nullable<int> userID, Nullable<int> storeID)
        {
            var dateOfBackoutParameter = dateOfBackout.HasValue ?
                new ObjectParameter("DateOfBackout", dateOfBackout) :
                new ObjectParameter("DateOfBackout", typeof(System.DateTime));
    
            var providerIDParameter = providerID.HasValue ?
                new ObjectParameter("ProviderID", providerID) :
                new ObjectParameter("ProviderID", typeof(int));
    
            var totalMonyParameter = totalMony != null ?
                new ObjectParameter("TotalMony", totalMony) :
                new ObjectParameter("TotalMony", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var storeIDParameter = storeID.HasValue ?
                new ObjectParameter("StoreID", storeID) :
                new ObjectParameter("StoreID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("insertbackout", backoutID, dateOfBackoutParameter, providerIDParameter, totalMonyParameter, userIDParameter, storeIDParameter);
        }
    
        public virtual int InsertBill(Nullable<System.DateTime> dateOfBill, Nullable<int> providerID, string totalPaid, ObjectParameter billID, Nullable<int> userID, string paid, Nullable<int> storeID)
        {
            var dateOfBillParameter = dateOfBill.HasValue ?
                new ObjectParameter("DateOfBill", dateOfBill) :
                new ObjectParameter("DateOfBill", typeof(System.DateTime));
    
            var providerIDParameter = providerID.HasValue ?
                new ObjectParameter("ProviderID", providerID) :
                new ObjectParameter("ProviderID", typeof(int));
    
            var totalPaidParameter = totalPaid != null ?
                new ObjectParameter("TotalPaid", totalPaid) :
                new ObjectParameter("TotalPaid", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var paidParameter = paid != null ?
                new ObjectParameter("Paid", paid) :
                new ObjectParameter("Paid", typeof(string));
    
            var storeIDParameter = storeID.HasValue ?
                new ObjectParameter("StoreID", storeID) :
                new ObjectParameter("StoreID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertBill", dateOfBillParameter, providerIDParameter, totalPaidParameter, billID, userIDParameter, paidParameter, storeIDParameter);
        }
    
        public virtual int InsertBillIn(Nullable<int> backInID, Nullable<int> productID, string backProNu, string inPrice, string inTotal)
        {
            var backInIDParameter = backInID.HasValue ?
                new ObjectParameter("BackInID", backInID) :
                new ObjectParameter("BackInID", typeof(int));
    
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(int));
    
            var backProNuParameter = backProNu != null ?
                new ObjectParameter("BackProNu", backProNu) :
                new ObjectParameter("BackProNu", typeof(string));
    
            var inPriceParameter = inPrice != null ?
                new ObjectParameter("InPrice", inPrice) :
                new ObjectParameter("InPrice", typeof(string));
    
            var inTotalParameter = inTotal != null ?
                new ObjectParameter("InTotal", inTotal) :
                new ObjectParameter("InTotal", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertBillIn", backInIDParameter, productIDParameter, backProNuParameter, inPriceParameter, inTotalParameter);
        }
    
        public virtual int InsertBuyBill(Nullable<int> storeID, Nullable<double> exist, string price, string salePrice1, string salePrice2, Nullable<int> billID, string productName, ObjectParameter productTypeID, string productType, string minimum, ObjectParameter productID)
        {
            var storeIDParameter = storeID.HasValue ?
                new ObjectParameter("StoreID", storeID) :
                new ObjectParameter("StoreID", typeof(int));
    
            var existParameter = exist.HasValue ?
                new ObjectParameter("Exist", exist) :
                new ObjectParameter("Exist", typeof(double));
    
            var priceParameter = price != null ?
                new ObjectParameter("Price", price) :
                new ObjectParameter("Price", typeof(string));
    
            var salePrice1Parameter = salePrice1 != null ?
                new ObjectParameter("SalePrice1", salePrice1) :
                new ObjectParameter("SalePrice1", typeof(string));
    
            var salePrice2Parameter = salePrice2 != null ?
                new ObjectParameter("SalePrice2", salePrice2) :
                new ObjectParameter("SalePrice2", typeof(string));
    
            var billIDParameter = billID.HasValue ?
                new ObjectParameter("BillID", billID) :
                new ObjectParameter("BillID", typeof(int));
    
            var productNameParameter = productName != null ?
                new ObjectParameter("ProductName", productName) :
                new ObjectParameter("ProductName", typeof(string));
    
            var productTypeParameter = productType != null ?
                new ObjectParameter("ProductType", productType) :
                new ObjectParameter("ProductType", typeof(string));
    
            var minimumParameter = minimum != null ?
                new ObjectParameter("Minimum", minimum) :
                new ObjectParameter("Minimum", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertBuyBill", storeIDParameter, existParameter, priceParameter, salePrice1Parameter, salePrice2Parameter, billIDParameter, productNameParameter, productTypeID, productTypeParameter, minimumParameter, productID);
        }
    
        public virtual int InsertNewItemName(string productName, Nullable<int> productTypeID, Nullable<int> billID, Nullable<double> exist, string price, string salePrice1, string salePrice2, Nullable<int> storeID, ObjectParameter productID, string minimum)
        {
            var productNameParameter = productName != null ?
                new ObjectParameter("ProductName", productName) :
                new ObjectParameter("ProductName", typeof(string));
    
            var productTypeIDParameter = productTypeID.HasValue ?
                new ObjectParameter("ProductTypeID", productTypeID) :
                new ObjectParameter("ProductTypeID", typeof(int));
    
            var billIDParameter = billID.HasValue ?
                new ObjectParameter("BillID", billID) :
                new ObjectParameter("BillID", typeof(int));
    
            var existParameter = exist.HasValue ?
                new ObjectParameter("Exist", exist) :
                new ObjectParameter("Exist", typeof(double));
    
            var priceParameter = price != null ?
                new ObjectParameter("Price", price) :
                new ObjectParameter("Price", typeof(string));
    
            var salePrice1Parameter = salePrice1 != null ?
                new ObjectParameter("SalePrice1", salePrice1) :
                new ObjectParameter("SalePrice1", typeof(string));
    
            var salePrice2Parameter = salePrice2 != null ?
                new ObjectParameter("SalePrice2", salePrice2) :
                new ObjectParameter("SalePrice2", typeof(string));
    
            var storeIDParameter = storeID.HasValue ?
                new ObjectParameter("StoreID", storeID) :
                new ObjectParameter("StoreID", typeof(int));
    
            var minimumParameter = minimum != null ?
                new ObjectParameter("Minimum", minimum) :
                new ObjectParameter("Minimum", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertNewItemName", productNameParameter, productTypeIDParameter, billIDParameter, existParameter, priceParameter, salePrice1Parameter, salePrice2Parameter, storeIDParameter, productID, minimumParameter);
        }
    
        public virtual int InsertProvier(string providerName, string telephoneNumber, string companyName, ObjectParameter providerID, string credit, string debit)
        {
            var providerNameParameter = providerName != null ?
                new ObjectParameter("ProviderName", providerName) :
                new ObjectParameter("ProviderName", typeof(string));
    
            var telephoneNumberParameter = telephoneNumber != null ?
                new ObjectParameter("TelephoneNumber", telephoneNumber) :
                new ObjectParameter("TelephoneNumber", typeof(string));
    
            var companyNameParameter = companyName != null ?
                new ObjectParameter("CompanyName", companyName) :
                new ObjectParameter("CompanyName", typeof(string));
    
            var creditParameter = credit != null ?
                new ObjectParameter("Credit", credit) :
                new ObjectParameter("Credit", typeof(string));
    
            var debitParameter = debit != null ?
                new ObjectParameter("Debit", debit) :
                new ObjectParameter("Debit", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertProvier", providerNameParameter, telephoneNumberParameter, companyNameParameter, providerID, creditParameter, debitParameter);
        }
    
        public virtual int InsertPurchases(Nullable<int> billID, Nullable<int> productID, Nullable<int> productTypeID, string quantity, string bPrice, string bTatol)
        {
            var billIDParameter = billID.HasValue ?
                new ObjectParameter("BillID", billID) :
                new ObjectParameter("BillID", typeof(int));
    
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(int));
    
            var productTypeIDParameter = productTypeID.HasValue ?
                new ObjectParameter("ProductTypeID", productTypeID) :
                new ObjectParameter("ProductTypeID", typeof(int));
    
            var quantityParameter = quantity != null ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(string));
    
            var bPriceParameter = bPrice != null ?
                new ObjectParameter("BPrice", bPrice) :
                new ObjectParameter("BPrice", typeof(string));
    
            var bTatolParameter = bTatol != null ?
                new ObjectParameter("BTatol", bTatol) :
                new ObjectParameter("BTatol", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertPurchases", billIDParameter, productIDParameter, productTypeIDParameter, quantityParameter, bPriceParameter, bTatolParameter);
        }
    
        public virtual int InsertRepaySales(Nullable<int> customerID, Nullable<System.DateTime> dateOfPay, string totalMoneyPaied, string debit, Nullable<int> userID, Nullable<int> storageID)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var dateOfPayParameter = dateOfPay.HasValue ?
                new ObjectParameter("DateOfPay", dateOfPay) :
                new ObjectParameter("DateOfPay", typeof(System.DateTime));
    
            var totalMoneyPaiedParameter = totalMoneyPaied != null ?
                new ObjectParameter("TotalMoneyPaied", totalMoneyPaied) :
                new ObjectParameter("TotalMoneyPaied", typeof(string));
    
            var debitParameter = debit != null ?
                new ObjectParameter("Debit", debit) :
                new ObjectParameter("Debit", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var storageIDParameter = storageID.HasValue ?
                new ObjectParameter("StorageID", storageID) :
                new ObjectParameter("StorageID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertRepaySales", customerIDParameter, dateOfPayParameter, totalMoneyPaiedParameter, debitParameter, userIDParameter, storageIDParameter);
        }
    
        public virtual int insertsale(Nullable<int> productID, Nullable<int> productTypeID, Nullable<int> saleBillID, string quantity, string price, string bTotal, string sNotes)
        {
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(int));
    
            var productTypeIDParameter = productTypeID.HasValue ?
                new ObjectParameter("ProductTypeID", productTypeID) :
                new ObjectParameter("ProductTypeID", typeof(int));
    
            var saleBillIDParameter = saleBillID.HasValue ?
                new ObjectParameter("SaleBillID", saleBillID) :
                new ObjectParameter("SaleBillID", typeof(int));
    
            var quantityParameter = quantity != null ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(string));
    
            var priceParameter = price != null ?
                new ObjectParameter("Price", price) :
                new ObjectParameter("Price", typeof(string));
    
            var bTotalParameter = bTotal != null ?
                new ObjectParameter("BTotal", bTotal) :
                new ObjectParameter("BTotal", typeof(string));
    
            var sNotesParameter = sNotes != null ?
                new ObjectParameter("SNotes", sNotes) :
                new ObjectParameter("SNotes", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("insertsale", productIDParameter, productTypeIDParameter, saleBillIDParameter, quantityParameter, priceParameter, bTotalParameter, sNotesParameter);
        }
    
        public virtual int InsertSaleBill(ObjectParameter saleBillID, Nullable<System.DateTime> billDate, Nullable<int> customerID, string total, Nullable<int> userID, string paid, string earn, string discount, Nullable<int> storeID)
        {
            var billDateParameter = billDate.HasValue ?
                new ObjectParameter("BillDate", billDate) :
                new ObjectParameter("BillDate", typeof(System.DateTime));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var totalParameter = total != null ?
                new ObjectParameter("Total", total) :
                new ObjectParameter("Total", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var paidParameter = paid != null ?
                new ObjectParameter("Paid", paid) :
                new ObjectParameter("Paid", typeof(string));
    
            var earnParameter = earn != null ?
                new ObjectParameter("Earn", earn) :
                new ObjectParameter("Earn", typeof(string));
    
            var discountParameter = discount != null ?
                new ObjectParameter("Discount", discount) :
                new ObjectParameter("Discount", typeof(string));
    
            var storeIDParameter = storeID.HasValue ?
                new ObjectParameter("StoreID", storeID) :
                new ObjectParameter("StoreID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertSaleBill", saleBillID, billDateParameter, customerIDParameter, totalParameter, userIDParameter, paidParameter, earnParameter, discountParameter, storeIDParameter);
        }
    
        public virtual int RepayForProvidier(Nullable<int> providerID, string totalMoney, Nullable<System.DateTime> paiedDate, string credit, Nullable<int> userID, Nullable<int> storageID)
        {
            var providerIDParameter = providerID.HasValue ?
                new ObjectParameter("ProviderID", providerID) :
                new ObjectParameter("ProviderID", typeof(int));
    
            var totalMoneyParameter = totalMoney != null ?
                new ObjectParameter("TotalMoney", totalMoney) :
                new ObjectParameter("TotalMoney", typeof(string));
    
            var paiedDateParameter = paiedDate.HasValue ?
                new ObjectParameter("PaiedDate", paiedDate) :
                new ObjectParameter("PaiedDate", typeof(System.DateTime));
    
            var creditParameter = credit != null ?
                new ObjectParameter("Credit", credit) :
                new ObjectParameter("Credit", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var storageIDParameter = storageID.HasValue ?
                new ObjectParameter("StorageID", storageID) :
                new ObjectParameter("StorageID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RepayForProvidier", providerIDParameter, totalMoneyParameter, paiedDateParameter, creditParameter, userIDParameter, storageIDParameter);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual int UpdateBuyBill(Nullable<int> billID, Nullable<double> exist, string price, string salePrice1, string salePrice2, string minimum, Nullable<int> productID)
        {
            var billIDParameter = billID.HasValue ?
                new ObjectParameter("BillID", billID) :
                new ObjectParameter("BillID", typeof(int));
    
            var existParameter = exist.HasValue ?
                new ObjectParameter("Exist", exist) :
                new ObjectParameter("Exist", typeof(double));
    
            var priceParameter = price != null ?
                new ObjectParameter("Price", price) :
                new ObjectParameter("Price", typeof(string));
    
            var salePrice1Parameter = salePrice1 != null ?
                new ObjectParameter("SalePrice1", salePrice1) :
                new ObjectParameter("SalePrice1", typeof(string));
    
            var salePrice2Parameter = salePrice2 != null ?
                new ObjectParameter("SalePrice2", salePrice2) :
                new ObjectParameter("SalePrice2", typeof(string));
    
            var minimumParameter = minimum != null ?
                new ObjectParameter("Minimum", minimum) :
                new ObjectParameter("Minimum", typeof(string));
    
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateBuyBill", billIDParameter, existParameter, priceParameter, salePrice1Parameter, salePrice2Parameter, minimumParameter, productIDParameter);
        }
    
        public virtual int Updateproductsinfo(string productName, string price, string salePrice1, string salePrice2, Nullable<int> exist, string minimum, Nullable<int> storeID, Nullable<int> productID)
        {
            var productNameParameter = productName != null ?
                new ObjectParameter("ProductName", productName) :
                new ObjectParameter("ProductName", typeof(string));
    
            var priceParameter = price != null ?
                new ObjectParameter("Price", price) :
                new ObjectParameter("Price", typeof(string));
    
            var salePrice1Parameter = salePrice1 != null ?
                new ObjectParameter("SalePrice1", salePrice1) :
                new ObjectParameter("SalePrice1", typeof(string));
    
            var salePrice2Parameter = salePrice2 != null ?
                new ObjectParameter("SalePrice2", salePrice2) :
                new ObjectParameter("SalePrice2", typeof(string));
    
            var existParameter = exist.HasValue ?
                new ObjectParameter("Exist", exist) :
                new ObjectParameter("Exist", typeof(int));
    
            var minimumParameter = minimum != null ?
                new ObjectParameter("Minimum", minimum) :
                new ObjectParameter("Minimum", typeof(string));
    
            var storeIDParameter = storeID.HasValue ?
                new ObjectParameter("StoreID", storeID) :
                new ObjectParameter("StoreID", typeof(int));
    
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Updateproductsinfo", productNameParameter, priceParameter, salePrice1Parameter, salePrice2Parameter, existParameter, minimumParameter, storeIDParameter, productIDParameter);
        }
    
        public virtual int UpdateStorage(string storageName, string totalMoney, Nullable<int> storeID, Nullable<int> storageID)
        {
            var storageNameParameter = storageName != null ?
                new ObjectParameter("StorageName", storageName) :
                new ObjectParameter("StorageName", typeof(string));
    
            var totalMoneyParameter = totalMoney != null ?
                new ObjectParameter("TotalMoney", totalMoney) :
                new ObjectParameter("TotalMoney", typeof(string));
    
            var storeIDParameter = storeID.HasValue ?
                new ObjectParameter("StoreID", storeID) :
                new ObjectParameter("StoreID", typeof(int));
    
            var storageIDParameter = storageID.HasValue ?
                new ObjectParameter("StorageID", storageID) :
                new ObjectParameter("StorageID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateStorage", storageNameParameter, totalMoneyParameter, storeIDParameter, storageIDParameter);
        }
    
        public virtual int UpdateTransfer(Nullable<int> exist, string price, string salePrice1, string salePrice2, Nullable<int> productID)
        {
            var existParameter = exist.HasValue ?
                new ObjectParameter("Exist", exist) :
                new ObjectParameter("Exist", typeof(int));
    
            var priceParameter = price != null ?
                new ObjectParameter("Price", price) :
                new ObjectParameter("Price", typeof(string));
    
            var salePrice1Parameter = salePrice1 != null ?
                new ObjectParameter("SalePrice1", salePrice1) :
                new ObjectParameter("SalePrice1", typeof(string));
    
            var salePrice2Parameter = salePrice2 != null ?
                new ObjectParameter("SalePrice2", salePrice2) :
                new ObjectParameter("SalePrice2", typeof(string));
    
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateTransfer", existParameter, priceParameter, salePrice1Parameter, salePrice2Parameter, productIDParameter);
        }
    
        public virtual int UpdteUser(string name, string userName, string password, string telephoneNumber, Nullable<int> positionID, Nullable<int> userID)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var telephoneNumberParameter = telephoneNumber != null ?
                new ObjectParameter("TelephoneNumber", telephoneNumber) :
                new ObjectParameter("TelephoneNumber", typeof(string));
    
            var positionIDParameter = positionID.HasValue ?
                new ObjectParameter("PositionID", positionID) :
                new ObjectParameter("PositionID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdteUser", nameParameter, userNameParameter, passwordParameter, telephoneNumberParameter, positionIDParameter, userIDParameter);
        }
    }
}
